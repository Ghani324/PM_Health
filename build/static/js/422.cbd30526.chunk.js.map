{"version":3,"file":"static/js/422.cbd30526.chunk.js","mappings":"6OAKMA,EAAQ,kBAsBRC,EAAa,SAACC,GAClB,OAAOC,IAAAA,IACAH,EAAUE,GACdE,MAAK,SAACC,GAAuC,OAAKA,EAASC,IAAI,IAC/DF,MAAK,SAACC,GAAwB,OAAKA,EAASC,IAAI,GACrD,EAEMC,EAAa,SAACL,GAClB,OAAOC,IAAAA,KACC,GAADK,OAAIR,EAAQ,KAAAQ,OAAIN,EAAKO,IAAMP,GAC/BE,MAAK,SAACC,GAAuC,OAAKA,EAASC,IAAI,IAC/DF,MAAK,SAACC,GAAwB,OAAKA,EAASC,IAAI,GACrD,E,SC/BMI,GAAsBC,EAAAA,EAAAA,eAAwCC,EAAAA,IAE9DC,EAAyC,SAAHC,GAAoB,IAAfC,EAAQD,EAARC,SAC/CC,GAA0BC,EAAAA,EAAAA,UAAqBL,EAAAA,GAAAA,OAA0BM,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlEI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAOtB,OACEI,EAAAA,EAAAA,KAACZ,EAAoBa,SAAQ,CAACC,MAAO,CAACJ,MAAAA,EAAOK,YAN3B,SAACC,GACnB,IAAMC,GAAYC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAOR,GAAUM,GACnCL,EAASM,EACX,GAG4DZ,SACvDA,GAGP,EAEMc,EAAkB,WAAH,OAASC,EAAAA,EAAAA,YAAWpB,EAAoB,ECTvDqB,GAAuBC,EAAAA,EAAAA,IAA4BC,EAAAA,IACnDC,EAA0C,SAAHpB,GAAoB,IAAfC,EAAQD,EAARC,SACzCK,EAASS,IAATT,MACPJ,GAA0BC,EAAAA,EAAAA,WAAiBkB,EAAAA,EAAAA,IAAsBf,IAAOF,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjEoB,EAAKlB,EAAA,GAAEmB,EAAQnB,EAAA,GAChBoB,GAAeC,EAAAA,EAAAA,UAAQ,kBAAMJ,EAAAA,EAAAA,IAAsBf,EAAM,GAAE,CAACA,KAElEoB,EAAAA,EAAAA,YAAU,WACJJ,IAAUE,GACZD,EAASC,EAEb,GAAG,CAACA,IAEJ,IAAAG,GAIIC,EAAAA,EAAAA,UAAS,GAADlC,OACPmC,EAAAA,GAAAA,WAAkB,KAAAnC,OAAI4B,IACzB,WACE,OFrBW,SAACA,GAChB,OAAOjC,IAAAA,IACA,GAADK,OAVW,wBAUM,KAAAA,OAAI4B,IACxBhC,MAAK,SAACwC,GAAoC,OAAKA,EAAEtC,IAAI,GAC1D,CEiBauC,CAAST,EAClB,GACA,CAACU,UAAW,EAAGC,kBAAkB,EAAMC,sBAAsB,IAR7DC,EAAUR,EAAVQ,WACAC,EAAOT,EAAPS,QACM7C,EAAQoC,EAAdnC,KASF,OACEgB,EAAAA,EAAAA,KAACS,EAAqBR,SAAQ,CAACC,MAAO,CAAC2B,UAAWF,EAAYC,QAAAA,EAAS7C,SAAAA,EAAU+B,MAAAA,GAAOrB,SACrFA,GAGP,EAEMqC,EAAmB,WAAH,OAAStB,EAAAA,EAAAA,YAAWC,EAAqB,EAEzDsB,EAAuB,WAC3B,IAAOhD,EAAY+C,IAAZ/C,SACP,OAAKA,IAIU,OAARA,QAAQ,IAARA,OAAQ,EAARA,EAAUC,OAHR,EAIX,EAgBMgD,EAA0B,WAE9B,OADoBF,IAAbD,SAET,EC9DMI,GAAkB5C,EAAAA,EAAAA,eAAoC6C,EAAAA,IAEtDC,EAAqC,SAAH3C,GAAoB,IAAfC,EAAQD,EAARC,SAC3CC,GAAgCC,EAAAA,EAAAA,UAAoBuC,EAAAA,GAAAA,UAAyBtC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtE0C,EAAQxC,EAAA,GAAEyC,EAAWzC,EAAA,GAC5B0C,GAA8C3C,EAAAA,EAAAA,UAAauC,EAAAA,GAAAA,iBAAgCK,GAAA1C,EAAAA,EAAAA,GAAAyC,EAAA,GAApFE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GACnCV,EAAaC,IAAbD,UACD7C,EAAO+C,IACPW,GAAWzB,EAAAA,EAAAA,UAAQ,kBAAM0B,EAAAA,EAAAA,IAA6Bd,EAAW7C,EAAK,GAAE,CAAC6C,EAAW7C,IACpF4D,GAAgB3B,EAAAA,EAAAA,UAAQ,kBAAM4B,EAAAA,EAAAA,IAA2B7D,EAAMoD,EAAS,GAAE,CAACpD,EAAMoD,IAEvF,OACEpC,EAAAA,EAAAA,KAACiC,EAAgBhC,SAAQ,CACvBC,MAAO,CACLkC,SAAAA,EACAI,gBAAAA,EACAC,mBAAAA,EACAC,SAAAA,EACAE,cAAAA,EACAE,SAAU,SAAC3D,IACT4D,EAAAA,EAAAA,IAAiB5D,EAAIiD,EAAUC,EACjC,EACAW,YAAa,YACXC,EAAAA,EAAAA,IAAoBL,EAAeP,EAAarD,EAClD,EACAkE,cAAe,WACbb,EAAY,GACd,GACA5C,SAEDA,GAGP,EAEM0D,EAAc,WAAH,OAAS3C,EAAAA,EAAAA,YAAWyB,EAAgB,EC3C/CmB,EAAmB,WACMD,IAAtBV,mBAKP,OACEzC,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,6BAA6B,6BAA2B,QAkB3E,E,oBCvBMC,EAAoB,WACxB,IAAAC,EAAkCJ,IAA3Bf,EAAQmB,EAARnB,SAAUc,EAAaK,EAAbL,cACXM,GAAcC,EAAAA,EAAAA,kBACb3C,EAASgB,IAAThB,MAED4C,GAAsBC,EAAAA,EAAAA,cAAY,kBLkCd,SAACC,GAC3B,IAAMC,EAAWD,EAAQE,KAAI,SAAC3E,GAAE,OAAKN,IAAAA,OAAa,GAADK,OAAIR,EAAQ,KAAAQ,OAAIC,GAAK,IACtE,OAAON,IAAAA,IAAUgF,GAAU/E,MAAK,WAAO,GACzC,CKrCgDiF,CAAoB3B,EAAS,GAAE,CAE3E4B,UAAW,WAETR,EAAYS,kBAAkB,CAAC,GAAD/E,OAAImC,EAAAA,GAAAA,WAAkB,KAAAnC,OAAI4B,KACxDoC,GACF,IAGF,OACEgB,EAAAA,EAAAA,MAAA,OAAKb,UAAU,gDAA+C5D,SAAA,EAC5DyE,EAAAA,EAAAA,MAAA,OAAKb,UAAU,iBAAgB5D,SAAA,EAC7BO,EAAAA,EAAAA,KAAA,QAAMqD,UAAU,OAAM5D,SAAE2C,EAAS+B,SAAc,gBAGjDnE,EAAAA,EAAAA,KAAA,UACEoE,KAAK,SACLf,UAAU,iBACVgB,SAAOC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAAkBnB,EAAoBoB,cAAa,cAAAH,EAAAI,OAAA,SAAAJ,EAAAK,MAAA,wBAAAL,EAAAM,OAAA,GAAAR,EAAA,KAAChF,SAC9D,sBAKP,EC9BMyF,EAA2B,WAC/B,IAAO/E,EAAeI,IAAfJ,YACPT,GAAoCC,EAAAA,EAAAA,UAAiB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjDyF,EAAUvF,EAAA,GAAEwF,EAAaxF,EAAA,GAK1ByF,GAAsBC,EAAAA,EAAAA,IAAYH,EAAY,KAYpD,OAVAjE,EAAAA,EAAAA,YACE,gBAC8BqE,IAAxBF,QAAoDE,IAAfJ,GACvChF,GAAWG,EAAAA,EAAAA,GAAC,CAACkF,OAAQH,GAAwBI,EAAAA,IAEjD,GACA,CAACJ,KAKDrF,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,aAAY5D,UAEzByE,EAAAA,EAAAA,MAAA,OAAKb,UAAU,mDAAkD5D,SAAA,EAC/DO,EAAAA,EAAAA,KAAC0F,EAAAA,GAAK,CACJC,KAAK,0CACLtC,UAAU,uCAEZrD,EAAAA,EAAAA,KAAA,SACEoE,KAAK,OACL,4BAA0B,SAC1Bf,UAAU,gDACVuC,YAAY,cACZ1F,MAAOiF,EACPU,SAAU,SAACC,GAAC,OAAKV,EAAcU,EAAEC,OAAO7F,MAAM,QAMxD,ECvCM8F,EAAkB,WACtB,IAAO5D,EAAYe,IAAZf,SACP,OACE8B,EAAAA,EAAAA,MAAA,OAAKb,UAAU,4BAA2B5D,SAAA,EACxCO,EAAAA,EAAAA,KAACkF,EAAwB,KAEzBlF,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,eAAc5D,SAE1B2C,EAAS+B,OAAS,GAAInE,EAAAA,EAAAA,KAACsD,EAAiB,KAAMtD,EAAAA,EAAAA,KAACoD,EAAgB,QAMxE,E,UCVM6C,EAAgC,SAAHzG,GAAA,IAAK0G,EAAM1G,EAAN0G,OAAM,OAC5ClG,EAAAA,EAAAA,KAAAmG,EAAAA,SAAA,CAAA1G,SACGyG,EAAOE,QAAmC,kBAAlBF,EAAOE,QAC9BpG,EAAAA,EAAAA,KAAA,MAAAM,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ4F,EAAOG,kBAAgB,IAAA5G,SAAGyG,EAAOI,OAAO,aAEhDJ,EAAOI,OAAO,WAEf,E,UCNCC,EAAuB,SAAH/G,GAAA,IAAKgH,EAAGhH,EAAHgH,IAAG,OAChCxG,EAAAA,EAAAA,KAAA,MAAAM,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQkG,EAAIC,eAAa,IAAAhH,SACtB+G,EAAIE,MAAM5C,KAAI,SAAC6C,GACd,OACE3G,EAAAA,EAAAA,KAAA,MAAAM,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACMqG,EAAKC,gBAAc,IACvBvD,WAAWwD,EAAAA,EAAAA,GAAK,CAAC,uBAA2C,YAAnBF,EAAKT,OAAO/G,KAAmBM,SAEvEkH,EAAKL,OAAO,UAGnB,MACG,E,UCZDQ,EAA0B,SAAHtH,GAAA,IAAKZ,EAAIY,EAAJZ,KAAI,OACpCsF,EAAAA,EAAAA,MAAA,OAAKb,UAAU,4BAA2B5D,SAAA,EAExCO,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,2DAGfrD,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,qBAAoB5D,UACjCO,EAAAA,EAAAA,KAAA,KAAG+G,KAAK,IAAI1D,UAAU,wCAAuC5D,SAC1Db,EAAKoI,eAIN,ECZFC,EAAmC,SAAHzH,GAAA,IAAKZ,EAAIY,EAAJZ,KAAI,OAC7CsF,EAAAA,EAAAA,MAAA,OAAKb,UAAU,4BAA2B5D,SAAA,EAExCO,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,2DAGfrD,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,qBAAoB5D,UACjCO,EAAAA,EAAAA,KAAA,KAAG+G,KAAK,IAAI1D,UAAU,wCAAuC5D,SAC1Db,EAAKsI,uBAIN,ECZFC,EAAkC,SAAH3H,GAAA,IAAKZ,EAAIY,EAAJZ,KAAI,OAC5CsF,EAAAA,EAAAA,MAAA,OAAKb,UAAU,4BAA2B5D,SAAA,EAExCO,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,2DAGfrD,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,qBAAoB5D,UACjCO,EAAAA,EAAAA,KAAA,KAAG+G,KAAK,IAAI1D,UAAU,wCAAuC5D,SAC1Db,EAAKwI,aAIN,ECZFC,EAAkC,SAAH7H,GAAA,IAAKZ,EAAIY,EAAJZ,KAAI,OAC5CsF,EAAAA,EAAAA,MAAA,OAAKb,UAAU,4BAA2B5D,SAAA,EAExCO,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,2DAGfrD,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,qBAAoB5D,UACjCO,EAAAA,EAAAA,KAAA,KAAG+G,KAAK,IAAI1D,UAAU,wCAAuC5D,SAC1Db,EAAK0I,mBAIN,ECVFC,EAA8B,SAAH/H,GAAwC,IAAnC6D,EAAS7D,EAAT6D,UAAWmE,EAAKhI,EAALgI,MAAOC,EAAUjI,EAAViI,WAChDtI,EAAKsI,EAAWvB,OAAO/G,GAC7BuI,EAA6BnH,IAAtBT,EAAK4H,EAAL5H,MAAOK,EAAWuH,EAAXvH,YAERwH,GAAuB1G,EAAAA,EAAAA,UAAQ,WACnC,OAAOnB,EAAM8H,MAAQ9H,EAAM8H,OAASzI,CACtC,GAAG,CAACW,EAAOX,IACL0I,GAAoC5G,EAAAA,EAAAA,UAAQ,kBAAMnB,EAAM+H,KAAK,GAAE,CAAC/H,IA0BtE,OACEE,EAAAA,EAAAA,KAAA,MAAAM,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACMmH,EAAWvB,OAAOG,kBAAgB,IACtChD,WAAWwD,EAAAA,EAAAA,GACTxD,EACAsE,QAAkCpC,IAAVsC,GAAmB,cAAA3I,OAAkB2I,IAE/DC,MAAO,CAACC,OAAQ,WAChB1D,QAhCe,WAEjB,GAAW,YAAPlF,GAA2B,cAAPA,EAIxB,GAAKwI,GAML,GAAIA,QAAkCpC,IAAVsC,EAAqB,CAC/C,GAAc,QAAVA,EAGF,YADA1H,GAAWG,EAAAA,EAAAA,GAAC,CAACsH,KAAMzI,EAAI0I,MAAO,QAAWpC,EAAAA,KAK3CtF,GAAWG,EAAAA,EAAAA,GAAC,CAACsH,UAAMrC,EAAWsC,WAAOtC,GAAcE,EAAAA,IACrD,OAbEtF,GAAWG,EAAAA,EAAAA,GAAC,CAACsH,KAAMzI,EAAI0I,MAAO,OAAUpC,EAAAA,IAc5C,EAUwBhG,SAEnB+H,IAGP,EC5CMQ,EAA4C,CAMhD,CACE5B,OAAQ,SAAC6B,GAAK,OAAKjI,EAAAA,EAAAA,KAACuH,EAAgB,CAACE,WAAYQ,EAAOT,MAAM,YAAYnE,UAAU,eAAgB,EACpGlE,GAAI,WACJ+I,KAAM,SAAA1I,GAAA,IAAKyI,EAAKE,OAAAC,OAAA,KAAAC,EAAAA,EAAAA,GAAA7I,GAAAA,IAAA,OAAMQ,EAAAA,EAAAA,KAAC8G,EAAY,CAAClI,KAAMqJ,EAAMjJ,KAAKiJ,EAAMzB,IAAI8B,QAAU,GAE3E,CACElC,OAAQ,SAAC6B,GAAK,OAAKjI,EAAAA,EAAAA,KAACuH,EAAgB,CAACE,WAAYQ,EAAOT,MAAM,oBAAoBnE,UAAU,eAAgB,EAC5GlE,GAAI,mBACJ+I,KAAM,SAAAK,GAAA,IAAKN,EAAKE,OAAAC,OAAA,KAAAC,EAAAA,EAAAA,GAAAE,GAAAA,IAAA,OAAMvI,EAAAA,EAAAA,KAACiH,EAAqB,CAACrI,KAAMqJ,EAAMjJ,KAAKiJ,EAAMzB,IAAI8B,QAAU,GAEpF,CACElC,OAAQ,SAAC6B,GAAK,OAAKjI,EAAAA,EAAAA,KAACuH,EAAgB,CAACE,WAAYQ,EAAOT,MAAM,YAAYnE,UAAU,eAAgB,EACpGlE,GAAI,OACJ+I,KAAM,SAAAM,GAAA,IAAKP,EAAKE,OAAAC,OAAA,KAAAC,EAAAA,EAAAA,GAAAG,GAAAA,IAAA,OAAMxI,EAAAA,EAAAA,KAACmH,EAAoB,CAACvI,KAAMqJ,EAAMjJ,KAAKiJ,EAAMzB,IAAI8B,QAAU,GAEnF,CACElC,OAAQ,SAAC6B,GAAK,OAAKjI,EAAAA,EAAAA,KAACuH,EAAgB,CAACE,WAAYQ,EAAOT,MAAM,gBAAgBnE,UAAU,eAAgB,EACxGlE,GAAI,aACJ+I,KAAM,SAAAO,GAAA,IAAKR,EAAKE,OAAAC,OAAA,KAAAC,EAAAA,EAAAA,GAAAI,GAAAA,IAAA,OAAMzI,EAAAA,EAAAA,KAACqH,EAAoB,CAACzI,KAAMqJ,EAAMjJ,KAAKiJ,EAAMzB,IAAI8B,QAAU,ICtC/EI,EAAmB,WAcvB,OAAO1I,EAAAA,EAAAA,KAAA,OAAK8H,OAAKxH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAbF,CACbqI,aAAc,WACdC,UAAW,kCACXC,gBAAiB,OACjBC,MAAO,UACPC,WAAY,MACZC,OAAQ,IACRC,MAAO,OACPC,QAAS,YACTC,IAAK,mBACLC,KAAM,qBAGqB,IAAEC,SAAU,WAAYC,UAAW,WAAU7J,SAAC,iBAC7E,ECVM8J,EAAc,SAACC,GACnB,MAAc,qBAAVA,EACK,WAGK,iBAAVA,EACK,OAGFA,CACT,EAEMC,EAAsB,WAAO,IAADC,EAC1BC,EfwC2B,WACjC,IAAMC,GAAuCtJ,EAAAA,EAAAA,GAAA,CAC3CuJ,MAAO,IACJpE,EAAAA,IAGE1G,EAAY+C,IAAZ/C,SACP,OAAKA,GAAaA,EAAS+K,SAAY/K,EAAS+K,QAAQH,WAIjD5K,EAAS+K,QAAQH,WAHfC,CAIX,CepDqBG,GACblI,EAAYG,IACX7B,EAAeI,IAAfJ,YASP,OACE+D,EAAAA,EAAAA,MAAA,OAAKb,UAAU,MAAK5D,SAAA,EAClBO,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,kGACfrD,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,6FAA4F5D,UACzGO,EAAAA,EAAAA,KAAA,OAAKb,GAAG,0BAAyBM,UAC/BO,EAAAA,EAAAA,KAAA,MAAIqD,UAAU,aAAY5D,SACP,QADOiK,EACvBC,EAAWE,aAAK,IAAAH,OAAA,EAAhBA,EACG5F,KAAI,SAACkG,GACL,OAAA1J,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAW0J,GAAI,IAAER,MAAOD,EAAYS,EAAKR,QAC3C,IACC1F,KAAI,SAACkG,GAAI,OACRhK,EAAAA,EAAAA,KAAA,MAEEqD,WAAWwD,EAAAA,EAAAA,GAAK,YAAa,CAC3BoD,OAAQN,EAAWO,OAASF,EAAKE,KACjCxH,SAAUb,EACVsI,SAAyB,aAAfH,EAAKR,MACf3E,KAAqB,SAAfmF,EAAKR,QACV/J,UAEHO,EAAAA,EAAAA,KAAA,KACEqD,WAAWwD,EAAAA,EAAAA,GAAK,YAAa,CAC3B,YAA4B,aAAfmD,EAAKR,OAAuC,SAAfQ,EAAKR,MAC/C,OAAuB,aAAfQ,EAAKR,QAEfnF,QAAS,WAjCR,IAAC6F,KAiCwBF,EAAKE,QAhClCrI,GAAa8H,EAAWO,OAASA,GAI9C/J,EAAY,CAAC+J,KAAAA,EAAME,eAAgBT,EAAWS,gBAAkB,IA4BZ,EACpCtC,MAAO,CAACC,OAAQ,WAAWtI,SAE1B8J,EAAYS,EAAKR,UAhBfQ,EAAKR,MAkBP,YAOrB,ECvDMa,EAAa,WACjB,IAAMC,EAAQvI,IACRF,EAAYG,IACZhD,GAAOiC,EAAAA,EAAAA,UAAQ,kBAAMqJ,CAAK,GAAE,CAACA,IAC7BC,GAAUtJ,EAAAA,EAAAA,UAAQ,kBAAM+G,CAAY,GAAE,IAC5CwC,GAAsEC,EAAAA,EAAAA,UAAS,CAC7EF,QAAAA,EACAvL,KAAAA,IAFK0L,EAAaF,EAAbE,cAAeC,EAAiBH,EAAjBG,kBAAmBC,EAAOJ,EAAPI,QAASC,EAAIL,EAAJK,KAAMC,EAAUN,EAAVM,WAKxD,OACE5G,EAAAA,EAAAA,MAAC6G,EAAAA,GAAU,CAAC1H,UAAU,OAAM5D,SAAA,EAC1BO,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,mBAAkB5D,UAC/ByE,EAAAA,EAAAA,MAAA,SAAA5D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEnB,GAAG,iBACHkE,UAAU,qEACNqH,KAAe,IAAAjL,SAAA,EAEnBO,EAAAA,EAAAA,KAAA,SAAAP,UACEO,EAAAA,EAAAA,KAAA,MAAIqD,UAAU,2DAA0D5D,SACrEmL,EAAQ9G,KAAI,SAACoC,GAA4B,OACxClG,EAAAA,EAAAA,KAACiG,EAAkB,CAAiBC,OAAQA,GAAnBA,EAAO/G,GAAsB,SAI5Da,EAAAA,EAAAA,KAAA,SAAAM,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAO+C,UAAU,yBAA4BsH,KAAmB,IAAAlL,SAC7DoL,EAAK1G,OAAS,EACb0G,EAAK/G,KAAI,SAAC0C,EAAgBwE,GAExB,OADAF,EAAWtE,IACJxG,EAAAA,EAAAA,KAACuG,EAAS,CAACC,IAAKA,GAAI,OAAAtH,OAAa8L,EAAC,KAAA9L,OAAIsH,EAAIrH,IACnD,KAEAa,EAAAA,EAAAA,KAAA,MAAAP,UACEO,EAAAA,EAAAA,KAAA,MAAIiL,QAAS,EAAExL,UACbO,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,uEAAsE5D,SAAC,4CASlGO,EAAAA,EAAAA,KAACyJ,EAAmB,IACnB5H,IAAa7B,EAAAA,EAAAA,KAAC0I,EAAgB,MAGrC,ECvDMwC,EAAsB,WAC1B,IAAOzI,EAAsBU,IAAtBV,mBAEP,OACEyB,EAAAA,EAAAA,MAAA,OAAKb,UAAU,eAAc5D,SAAA,EAE3BO,EAAAA,EAAAA,KAAA,MAAIqD,UAAU,YAAW5D,SAAC,eAI1BO,EAAAA,EAAAA,KAAA,OACEqD,UAAU,8CACV,6BAA2B,QAC3BgB,QAAS,kBAAM5B,OAAmB8C,EAAU,EAC5CuC,MAAO,CAACC,OAAQ,WAAWtI,UAE3BO,EAAAA,EAAAA,KAAC0F,EAAAA,GAAK,CAACC,KAAK,yCAAyCtC,UAAU,mBAKvE,E,oBCPa8H,EAGD,GAHCA,EAIO,GAJPA,EAQH,GARGA,GASG,GCPVC,GAAiBC,EAAAA,KAAaC,MAAM,CACxCtE,SAAUqE,EAAAA,KAAaE,SAAS,yBAChCrE,iBAAkBmE,EAAAA,KAAaE,SAAS,iCACxCC,SAAUH,EAAAA,KAAaE,SAAS,yBAChCjE,aAAc+D,EAAAA,KAAaE,SAAS,+BAGhCE,GAA+B,SAAHjM,GAA+B,IAA1BZ,EAAIY,EAAJZ,KAAM8M,EAAalM,EAAbkM,cACpCjJ,EAAsBU,IAAtBV,mBACAb,EAAWE,IAAXF,QAEPlC,GAAsBC,EAAAA,EAAAA,WAAQW,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACzB1B,GAAI,IACPoI,SAAUpI,EAAKoI,UAAYmE,EAC3BjE,iBAAkBtI,EAAKsI,kBAAoBiE,EAC3C/D,OAAQxI,EAAKwI,QAAU+D,EACvB7D,aAAc1I,EAAK0I,cAAgB6D,MAL9BQ,GAML9L,EAAAA,EAAAA,GAAAH,EAAA,GANgB,GAQZkM,EAAS,SAACC,GACVA,GACFjK,IAEFa,OAAmB8C,EACrB,EAIMuG,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAeL,EACfM,iBAAkBb,GAClBc,SAAS,WAAD,IAAAC,GAAA7H,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAC,EAAO2H,EAAM7D,GAAA,IAAA8D,EAAA,OAAA9H,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACF,IADKwH,EAAa9D,EAAb8D,gBACV,GAAK1H,EAAAC,KAAA,IAEb0H,EAAAA,EAAAA,IAAWF,EAAOjN,IAAI,CAADwF,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EACjB5F,EAAWmN,GAAO,OAAAzH,EAAAE,KAAA,uBAAAF,EAAAE,KAAA,GAElBlG,EAAWyN,GAAO,QAAAzH,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA4H,GAAA5H,EAAA,SAI1B6H,QAAQC,MAAK9H,EAAA4H,IAAI,QAGL,OAHK5H,EAAAC,KAAA,GAEjByH,GAAc,GACdT,GAAO,GAAKjH,EAAA+H,OAAA,6BAAA/H,EAAAM,OAAA,GAAAR,EAAA,yBAEf,gBAAAkI,EAAAC,GAAA,OAAAT,EAAAU,MAAA,KAAAC,UAAA,EAfQ,KAkBX,OACE5I,EAAAA,EAAAA,MAAAiC,EAAAA,SAAA,CAAA1G,SAAA,EACEyE,EAAAA,EAAAA,MAAA,QAAM/E,GAAG,yBAAyBkE,UAAU,OAAO6I,SAAUJ,EAAOiB,aAAcC,YAAU,EAAAvN,SAAA,EAE1FO,EAAAA,EAAAA,KAAA,OACEqD,UAAU,yCACVlE,GAAG,2BACH,iBAAe,OACf,0BAAwB,6BACxB,4BAA0B,OAC1B,8BAA4B,4BAC5B,0BAAwB,4BACxB,wBAAsB,WAOxB+E,EAAAA,EAAAA,MAAA,OAAKb,UAAU,oBAAmB5D,SAAA,EAChCO,EAAAA,EAAAA,KAAA,UACEoE,KAAK,QACLC,QAAS,kBAAMuH,GAAQ,EACvBvI,UAAU,qBACV,6BAA2B,SAC3BX,SAAUoJ,EAAOmB,cAAgBvB,EAAcjM,SAChD,aAIDyE,EAAAA,EAAAA,MAAA,UACEE,KAAK,SACLf,UAAU,kBACV,6BAA2B,SAC3BX,SAAUgJ,GAAiBI,EAAOmB,eAAiBnB,EAAOoB,UAAYpB,EAAOqB,QAAQ1N,SAAA,EAErFO,EAAAA,EAAAA,KAAA,QAAMqD,UAAU,kBAAiB5D,SAAC,YAChCqM,EAAOmB,cAAgBvB,KACvBxH,EAAAA,EAAAA,MAAA,QAAMb,UAAU,qBAAoB5D,SAAA,CAAC,iBACpB,KACfO,EAAAA,EAAAA,KAAA,QAAMqD,UAAU,oEAOxByI,EAAOmB,cAAgBvB,KAAkB1L,EAAAA,EAAAA,KAAC0I,EAAgB,MAGlE,EChHM0E,GAA2B,WAC/B,IAAA7J,EAA8CJ,IAAvCX,EAAee,EAAff,gBAAiBC,EAAkBc,EAAlBd,mBAClB4K,GAAwBf,EAAAA,EAAAA,IAAW9J,GACzCrB,GAIIC,EAAAA,EAAAA,UAAS,GAADlC,OACPmC,EAAAA,GAAAA,WAAkB,UAAAnC,OAASsD,IAC9B,WACE,OtBIerD,EsBJIqD,EtBKhB3D,IAAAA,IACA,GAADK,OAAIR,EAAQ,mBAAAQ,OAAkBC,IACjCL,MAAK,SAACC,GAAuC,OAAKA,EAASC,IAAI,IAC/DF,MAAK,SAACC,GAAwB,OAAKA,EAASC,IAAI,IAJjC,IAACG,CsBHjB,GACA,CACEqC,UAAW,EACX8L,QAASD,EACTE,QAAS,SAACC,GACR/K,OAAmB8C,GACnBiH,QAAQC,MAAMe,EAChB,IAdF3L,EAASV,EAATU,UACMjD,EAAIuC,EAAVnC,KACAyN,EAAKtL,EAALsL,MAgBF,OAAKjK,EAIAX,GAAc4K,IAAS7N,EAIrB,MAHEoB,EAAAA,EAAAA,KAACyL,GAAiB,CAACC,cAAe7J,EAAWjD,KAAMA,KAJnDoB,EAAAA,EAAAA,KAACyL,GAAiB,CAACC,cAAe7J,EAAWjD,KAAM,CAACO,QAAIoG,IAQnE,ECjCMkI,GAAgB,WAQpB,OAPAvM,EAAAA,EAAAA,YAAU,WAER,OADAwM,SAASC,KAAKC,UAAUC,IAAI,cACrB,WACLH,SAASC,KAAKC,UAAUE,OAAO,aACjC,CACF,GAAG,KAGD5J,EAAAA,EAAAA,MAAAiC,EAAAA,SAAA,CAAA1G,SAAA,EACEO,EAAAA,EAAAA,KAAA,OACEqD,UAAU,0BACVlE,GAAG,oBACH4O,KAAK,SACLC,UAAW,EACX,aAAW,OAAMvO,UAGjBO,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,8CAA6C5D,UAE1DyE,EAAAA,EAAAA,MAAA,OAAKb,UAAU,gBAAe5D,SAAA,EAC5BO,EAAAA,EAAAA,KAACkL,EAAmB,KAEpBlL,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,yCAAwC5D,UACrDO,EAAAA,EAAAA,KAACoN,GAAwB,cASjCpN,EAAAA,EAAAA,KAAA,OAAKqD,UAAU,+BAIrB,ECjCM4K,GAAgB,WACpB,IAAOzL,EAAmBW,IAAnBX,gBACP,OACE0B,EAAAA,EAAAA,MAAAiC,EAAAA,SAAA,CAAA1G,SAAA,EACEyE,EAAAA,EAAAA,MAACgK,EAAAA,GAAM,CAAAzO,SAAA,EACLO,EAAAA,EAAAA,KAACgG,EAAe,KAChBhG,EAAAA,EAAAA,KAACqK,EAAU,YAEQ9E,IAApB/C,IAAiCxC,EAAAA,EAAAA,KAACyN,GAAa,MAGtD,EAEMU,GAAY,WAAH,OACbnO,EAAAA,EAAAA,KAACT,EAAoB,CAAAE,UACnBO,EAAAA,EAAAA,KAACY,EAAqB,CAAAnB,UACpBO,EAAAA,EAAAA,KAACmC,EAAgB,CAAA1C,UACfO,EAAAA,EAAAA,KAACiO,GAAa,SAGG,ECxBnBG,GAAoC,CACxC,CACE5G,MAAO,kBACP7B,KAAM,8BACN0I,aAAa,EACbC,UAAU,GAEZ,CACE9G,MAAO,GACP7B,KAAM,GACN0I,aAAa,EACbC,UAAU,IAuBd,GAnBkB,WAChB,OACEpK,EAAAA,EAAAA,MAACqK,EAAAA,GAAM,CAAA9O,SAAA,EACLO,EAAAA,EAAAA,KAACwO,EAAAA,GAAK,CAACC,SAASzO,EAAAA,EAAAA,KAAC0O,EAAAA,GAAM,IAAIjP,UACzBO,EAAAA,EAAAA,KAACwO,EAAAA,GAAK,CACJ7I,KAAK,QACL8I,SACEvK,EAAAA,EAAAA,MAAAiC,EAAAA,SAAA,CAAA1G,SAAA,EACEO,EAAAA,EAAAA,KAAC2O,EAAAA,GAAS,CAACC,YAAaR,GAAiB3O,SAAC,gBAC1CO,EAAAA,EAAAA,KAACmO,GAAS,YAKlBnO,EAAAA,EAAAA,KAACwO,EAAAA,GAAK,CAAClG,OAAK,EAACmG,SAASzO,EAAAA,EAAAA,KAAC6O,EAAAA,GAAQ,CAACC,GAAG,oCAGzC,C","sources":["app/modules/apps/user-management/users-list/core/_requests.ts","app/modules/apps/user-management/users-list/core/QueryRequestProvider.tsx","app/modules/apps/user-management/users-list/core/QueryResponseProvider.tsx","app/modules/apps/user-management/users-list/core/ListViewProvider.tsx","app/modules/apps/user-management/users-list/components/header/UserListToolbar.tsx","app/modules/apps/user-management/users-list/components/header/UsersListGrouping.tsx","app/modules/apps/user-management/users-list/components/header/UsersListSearchComponent.tsx","app/modules/apps/user-management/users-list/components/header/UsersListHeader.tsx","app/modules/apps/user-management/users-list/table/columns/CustomHeaderColumn.tsx","app/modules/apps/user-management/users-list/table/columns/CustomRow.tsx","app/modules/apps/user-management/users-list/table/columns/UserInfoCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserInfoCellReport.tsx","app/modules/apps/user-management/users-list/table/columns/UserInfoCellPmSystem.tsx","app/modules/apps/user-management/users-list/table/columns/UserInfoCellPractice.tsx","app/modules/apps/user-management/users-list/table/columns/UserCustomHeader.tsx","app/modules/apps/user-management/users-list/table/columns/_columns.tsx","app/modules/apps/user-management/users-list/components/loading/UsersListLoading.tsx","app/modules/apps/user-management/users-list/components/pagination/UsersListPagination.tsx","app/modules/apps/user-management/users-list/table/UsersTable.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalHeader.tsx","app/modules/apps/user-management/users-list/core/_models.ts","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalForm.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModal.tsx","app/modules/apps/user-management/users-list/UsersList.tsx","app/modules/apps/user-management/UsersPage.tsx"],"sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst API_URL = process.env.REACT_APP_THEME_API_URL\r\nconst USER_URL = `/api/createuser`\r\nconst GET_USERS_URL = `/api/createuser/query`\r\n\r\nconst getUserList = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios\r\n    .get(`${USER_URL}/getUserList`)\r\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios\r\n    .get(`${GET_USERS_URL}?${query}`)\r\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${USER_URL}/users?user_id=${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst createUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .put(USER_URL, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updateUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .post(`${USER_URL}/${user.id}`, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst deleteUser = (userId: ID): Promise<void> => {\r\n  return axios.delete(`${USER_URL}/${userId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\r\n  const requests = userIds.map((id) => axios.delete(`${USER_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {getUsers, deleteUser, deleteSelectedUsers, getUserById, createUser, updateUser, getUserList}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n  WithChildren,\r\n} from '../../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC<WithChildren> = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n  WithChildren,\r\n} from '../../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC<WithChildren> = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n  WithChildren,\r\n} from '../../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC<WithChildren> = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import {KTSVG} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      {/* <UsersListFilter /> */}\r\n\r\n      {/* begin::Export */}\r\n      {/* <button type='button' className='btn btn-light-primary me-3'>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\r\n        Export\r\n      </button> */}\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      {/* <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add User\r\n      </button> */}\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search user'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","// @ts-nocheck\r\nimport {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","// @ts-nocheck\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../../_metronic/helpers'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: User\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => (\r\n  <div className='d-flex align-items-center'>\r\n    {/* begin:: Avatar */}\r\n    <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\r\n\r\n    </div>\r\n    <div className='d-flex flex-column'>\r\n      <a href='#' className='text-gray-800 text-hover-primary mb-1'>\r\n        {user.UserName}\r\n      </a>\r\n      \r\n    </div>\r\n  </div>\r\n)\r\n\r\n\r\n\r\nexport {UserInfoCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../../_metronic/helpers'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: User\r\n}\r\n\r\nconst UserInfoCellReporting: FC<Props> = ({user}) => (\r\n  <div className='d-flex align-items-center'>\r\n    {/* begin:: Avatar */}\r\n    <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\r\n\r\n    </div>\r\n    <div className='d-flex flex-column'>\r\n      <a href='#' className='text-gray-800 text-hover-primary mb-1'>\r\n        {user.ReportingManager}\r\n      </a>\r\n      \r\n    </div>\r\n  </div>\r\n)\r\n\r\n\r\n\r\nexport {UserInfoCellReporting}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../../_metronic/helpers'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: User\r\n}\r\n\r\nconst UserInfoCellPmsystem: FC<Props> = ({user}) => (\r\n  <div className='d-flex align-items-center'>\r\n    {/* begin:: Avatar */}\r\n    <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\r\n\r\n    </div>\r\n    <div className='d-flex flex-column'>\r\n      <a href='#' className='text-gray-800 text-hover-primary mb-1'>\r\n        {user.PmName}\r\n      </a>\r\n      \r\n    </div>\r\n  </div>\r\n)\r\n\r\n\r\n\r\nexport {UserInfoCellPmsystem}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../../_metronic/helpers'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: User\r\n}\r\n\r\nconst UserInfoCellPractice: FC<Props> = ({user}) => (\r\n  <div className='d-flex align-items-center'>\r\n    {/* begin:: Avatar */}\r\n    <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\r\n\r\n    </div>\r\n    <div className='d-flex flex-column'>\r\n      <a href='#' className='text-gray-800 text-hover-primary mb-1'>\r\n        {user.PracticeName}\r\n      </a>\r\n      \r\n    </div>\r\n  </div>\r\n)\r\n\r\n\r\n\r\nexport {UserInfoCellPractice}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","// @ts-nocheck\r\nimport {Column} from 'react-table'\r\nimport {UserInfoCell} from './UserInfoCell'\r\nimport { UserInfoCellReporting } from './UserInfoCellReport'\r\nimport { UserInfoCellPmsystem } from './UserInfoCellPmSystem'\r\nimport { UserInfoCellPractice } from './UserInfoCellPractice'\r\nimport {UserLastLoginCell} from './UserLastLoginCell'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  // {\r\n  //   Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n  //   id: 'selection',\r\n  //   Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  // },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='User Name' className='min-w-125px' />,\r\n    id: 'UserName',\r\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Reporting Manager' className='min-w-125px' />,\r\n    id: 'ReportingManager',\r\n    Cell: ({...props}) => <UserInfoCellReporting user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='PM System' className='min-w-125px' />,\r\n    id: 'PmId',\r\n    Cell: ({...props}) => <UserInfoCellPmsystem user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Practice Name' className='min-w-125px' />,\r\n    id: 'PracticeId',\r\n    Cell: ({...props}) => <UserInfoCellPractice user={props.data[props.row.index]} />,\r\n  },\r\n\r\n\r\n  // {\r\n  //   Header: (props) => <UserCustomHeader tableProps={props} title='Name' className='min-w-125px' />,\r\n  //   id: 'name',\r\n  //   Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  // },\r\n  // {\r\n  //   Header: (props) => <UserCustomHeader tableProps={props} title='Role' className='min-w-125px' />,\r\n  //   accessor: 'role',\r\n  // },\r\n  // {\r\n  //   Header: (props) => (\r\n  //     <UserCustomHeader tableProps={props} title='Last login' className='min-w-125px' />\r\n  //   ),\r\n  //   id: 'last_login',\r\n  //   Cell: ({...props}) => <UserLastLoginCell last_login={props.data[props.row.index].last_login} />,\r\n  // },\r\n  // {\r\n  //   Header: (props) => (\r\n  //     <UserCustomHeader tableProps={props} title='Two steps' className='min-w-125px' />\r\n  //   ),\r\n  //   id: 'two_steps',\r\n  //   Cell: ({...props}) => <UserTwoStepsCell two_steps={props.data[props.row.index].two_steps} />,\r\n  // },\r\n  // {\r\n  //   Header: (props) => (\r\n  //     <UserCustomHeader tableProps={props} title='Joined day' className='min-w-125px' />\r\n  //   ),\r\n  //   accessor: 'joined_day',\r\n  // },\r\n  // {\r\n  //   Header: (props) => (\r\n  //     <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n  //   ),\r\n  //   id: 'actions',\r\n  //   Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  // },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst mappedLabel = (label: string): string => {\r\n  if (label === '&laquo; Previous') {\r\n    return 'Previous'\r\n  }\r\n\r\n  if (label === 'Next &raquo;') {\r\n    return 'Next'\r\n  }\r\n\r\n  return label\r\n}\r\n\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links\r\n              ?.map((link) => {\r\n                return {...link, label: mappedLabel(link.label)}\r\n              })\r\n              .map((link) => (\r\n                <li\r\n                  key={link.label}\r\n                  className={clsx('page-item', {\r\n                    active: pagination.page === link.page,\r\n                    disabled: isLoading,\r\n                    previous: link.label === 'Previous',\r\n                    next: link.label === 'Next',\r\n                  })}\r\n                >\r\n                  <a\r\n                    className={clsx('page-link', {\r\n                      'page-text': link.label === 'Previous' || link.label === 'Next',\r\n                      'me-5': link.label === 'Previous',\r\n                    })}\r\n                    onClick={() => updatePage(link.page)}\r\n                    style={{cursor: 'pointer'}}\r\n                  >\r\n                    {mappedLabel(link.label)}\r\n                  </a>\r\n                </li>\r\n              ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from '../table/columns/CustomHeaderColumn'\r\nimport {CustomRow} from '../table/columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Edit User</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../../_metronic/helpers'\r\nexport type User = {\r\n  _id?: any,\r\n  id: ID,\r\n  UserName?: string\r\n  ReportingManager?: string,\r\n  ReportingManagerId?: string,\r\n  PmId? : string,\r\n  PracticeId?: string,\r\n  PmName? :string,\r\n  PracticeName?: string\r\n\r\n  \r\n}\r\n\r\nexport type UsersQueryResponse = Response<Array<User>>\r\n\r\nexport const initialUser: User = {\r\n  _id: null,\r\n  id: null,\r\n  UserName: '',\r\n  ReportingManager: '',\r\n  ReportingManagerId: '',\r\n  PmId : \"\",\r\n  PracticeId: \"\",\r\n  PmName: '',\r\n  PracticeName: '',\r\n}\r\n","import {FC, useState} from 'react'\r\nimport * as Yup from 'yup'\r\nimport {useFormik} from 'formik'\r\nimport {isNotEmpty, toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport {initialUser, User} from '../core/_models'\r\nimport clsx from 'clsx'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser, updateUser} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\n\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  user: User\r\n}\r\n\r\n\r\n\r\nconst editUserSchema = Yup.object().shape({\r\n  UserName: Yup.string().required('User Name is required'),\r\n  ReportingManager: Yup.string().required('Reporting Manager is required'),\r\n  PmSystem: Yup.string().required('Pm System is required'),\r\n  PracticeName: Yup.string().required('Practice Name is required')\r\n})\r\n\r\nconst UserEditModalForm: FC<Props> = ({user, isUserLoading}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {refetch} = useQueryResponse()\r\n\r\n  const [userForEdit] = useState<User>({\r\n    ...user,\r\n    UserName: user.UserName || initialUser.UserName,\r\n    ReportingManager: user.ReportingManager || initialUser.ReportingManager,\r\n    PmName: user.PmName || initialUser.PmName,\r\n    PracticeName: user.PracticeName || initialUser.PracticeName,\r\n  })\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n\r\n\r\n  const formik = useFormik({\r\n    initialValues: userForEdit,\r\n    validationSchema: editUserSchema,\r\n    onSubmit: async (values, {setSubmitting}) => {\r\n      setSubmitting(true)\r\n      try {\r\n        if (isNotEmpty(values.id)) {\r\n          await updateUser(values)\r\n        } else {\r\n          await createUser(values)\r\n        }\r\n          \r\n      } catch (ex) {\r\n        console.error(ex)\r\n      } finally {\r\n        setSubmitting(true)\r\n        cancel(true)\r\n      }\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <form id='kt_modal_add_user_form' className='form' onSubmit={formik.handleSubmit} noValidate>\r\n        {/* begin::Scroll */}\r\n        <div\r\n          className='d-flex flex-column scroll-y me-n7 pe-7'\r\n          id='kt_modal_add_user_scroll'\r\n          data-kt-scroll='true'\r\n          data-kt-scroll-activate='{default: false, lg: true}'\r\n          data-kt-scroll-max-height='auto'\r\n          data-kt-scroll-dependencies='#kt_modal_add_user_header'\r\n          data-kt-scroll-wrappers='#kt_modal_add_user_scroll'\r\n          data-kt-scroll-offset='300px'\r\n        > \r\n\r\n         </div>\r\n        {/* end::Scroll */}\r\n\r\n        {/* begin::Actions */}\r\n        <div className='text-center pt-15'>\r\n          <button\r\n            type='reset'\r\n            onClick={() => cancel()}\r\n            className='btn btn-light me-3'\r\n            data-kt-users-modal-action='cancel'\r\n            disabled={formik.isSubmitting || isUserLoading}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type='submit'\r\n            className='btn btn-primary'\r\n            data-kt-users-modal-action='submit'\r\n            disabled={isUserLoading || formik.isSubmitting || !formik.isValid || !formik.touched}\r\n          >\r\n            <span className='indicator-label'>Submit</span>\r\n            {(formik.isSubmitting || isUserLoading) && (\r\n              <span className='indicator-progress'>\r\n                Please wait...{' '}\r\n                <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n              </span>\r\n            )}\r\n          </button>\r\n        </div>\r\n        {/* end::Actions */}\r\n      </form>\r\n      {(formik.isSubmitting || isUserLoading) && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {\r\n    isLoading,\r\n    data: user,\r\n    error,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} user={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} user={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-650px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15 my-7'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {KTCard} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersListPage = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst UsersList = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <UsersListPage />\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {UsersList}\r\n","import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\r\nimport {PageLink, PageTitle} from '../../../../_metronic/layout/core'\r\nimport {UsersList} from './users-list/UsersList'\r\n\r\nconst usersBreadcrumbs: Array<PageLink> = [\r\n  {\r\n    title: 'User Management',\r\n    path: '/apps/user-management/users',\r\n    isSeparator: false,\r\n    isActive: false,\r\n  },\r\n  {\r\n    title: '',\r\n    path: '',\r\n    isSeparator: true,\r\n    isActive: false,\r\n  },\r\n]\r\n\r\nconst UsersPage = () => {\r\n  return (\r\n    <Routes>\r\n      <Route element={<Outlet />}>\r\n        <Route\r\n          path='users'\r\n          element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Users list</PageTitle>\r\n              <UsersList />\r\n            </>\r\n          }\r\n        />\r\n      </Route>\r\n      <Route index element={<Navigate to='/apps/user-management/users' />} />\r\n    </Routes>\r\n  )\r\n}\r\n\r\nexport default UsersPage\r\n"],"names":["USER_URL","createUser","user","axios","then","response","data","updateUser","concat","id","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","_ref","children","_useState","useState","_useState2","_slicedToArray","state","setState","_jsx","Provider","value","updateState","updates","updatedState","_objectSpread","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","stringifyRequestQuery","query","setQuery","updatedQuery","useMemo","useEffect","_useQuery","useQuery","QUERIES","d","getUsers","cacheTime","keepPreviousData","refetchOnWindowFocus","isFetching","refetch","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","_useState3","_useState4","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","UsersListToolbar","className","UsersListGrouping","_useListView","queryClient","useQueryClient","deleteSelectedItems","useMutation","userIds","requests","map","deleteSelectedUsers","onSuccess","invalidateQueries","_jsxs","length","type","onClick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","mutateAsync","abrupt","sent","stop","UsersListSearchComponent","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","undefined","search","initialQueryState","KTSVG","path","placeholder","onChange","e","target","UsersListHeader","CustomHeaderColumn","column","_Fragment","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserInfoCell","href","UserName","UserInfoCellReporting","ReportingManager","UserInfoCellPmsystem","PmName","UserInfoCellPractice","PracticeName","UserCustomHeader","title","tableProps","_useQueryRequest","isSelectedForSorting","sort","order","style","cursor","usersColumns","props","Cell","Object","assign","_objectDestructuringEmpty","index","_ref2","_ref3","_ref4","UsersListLoading","borderRadius","boxShadow","backgroundColor","color","fontWeight","margin","width","padding","top","left","position","textAlign","mappedLabel","label","UsersListPagination","_pagination$links","pagination","defaultPaginationState","links","payload","useQueryResponsePagination","link","active","page","previous","items_per_page","UsersTable","users","columns","_useTable","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","KTCardBody","i","colSpan","UserEditModalHeader","initialUser","editUserSchema","Yup","shape","required","PmSystem","UserEditModalForm","isUserLoading","userForEdit","cancel","withRefresh","formik","useFormik","initialValues","validationSchema","onSubmit","_onSubmit","values","setSubmitting","isNotEmpty","t0","console","error","finish","_x","_x2","apply","arguments","handleSubmit","noValidate","isSubmitting","isValid","touched","UserEditModalFormWrapper","enabledQuery","enabled","onError","err","UserEditModal","document","body","classList","add","remove","role","tabIndex","UsersListPage","KTCard","UsersList","usersBreadcrumbs","isSeparator","isActive","Routes","Route","element","Outlet","PageTitle","breadcrumbs","Navigate","to"],"sourceRoot":""}