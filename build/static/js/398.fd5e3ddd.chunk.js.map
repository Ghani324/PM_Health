{"version":3,"file":"static/js/398.fd5e3ddd.chunk.js","mappings":"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","sources":["app/modules/apps/role-manegement/users-list/core/_requests.ts","app/modules/apps/role-manegement/users-list/core/QueryRequestProvider.tsx","app/modules/apps/role-manegement/users-list/core/QueryResponseProvider.tsx","app/modules/apps/role-manegement/users-list/core/ListViewProvider.tsx","app/modules/apps/role-manegement/users-list/components/header/UserListToolbar.tsx","app/modules/apps/role-manegement/users-list/components/header/UsersListGrouping.tsx","app/modules/apps/role-manegement/users-list/components/header/UsersListSearchComponent.tsx","app/modules/apps/role-manegement/users-list/components/header/UsersListHeader.tsx","app/modules/apps/role-manegement/users-list/table/columns/CustomHeaderColumn.tsx","app/modules/apps/role-manegement/users-list/table/columns/CustomRow.tsx","app/modules/apps/role-manegement/users-list/table/columns/UserInfoCell.tsx","app/modules/apps/role-manegement/users-list/table/columns/UserInfoCellPermission.tsx","app/modules/apps/role-manegement/users-list/table/columns/UserCustomHeader.tsx","app/modules/apps/role-manegement/users-list/table/columns/_columns.tsx","app/modules/apps/role-manegement/users-list/components/loading/UsersListLoading.tsx","app/modules/apps/role-manegement/users-list/components/pagination/UsersListPagination.tsx","app/modules/apps/role-manegement/users-list/table/UsersTable.tsx","app/modules/apps/role-manegement/users-list/user-edit-modal/UserEditModalHeader.tsx","app/modules/apps/role-manegement/users-list/core/_models.ts","app/modules/apps/role-manegement/users-list/user-edit-modal/UserEditModalForm.tsx","app/modules/apps/role-manegement/users-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/modules/apps/role-manegement/users-list/user-edit-modal/UserEditModal.tsx","app/modules/apps/role-manegement/users-list/RolesList.tsx","app/modules/apps/role-manegement/RolePage.tsx"],"sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst API_URL = process.env.REACT_APP_THEME_API_URL\r\nconst USER_URL = `/api/roles`\r\nconst GET_USERS_URL = `/api/roles/query`\r\n\r\nconst getRoleList = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios\r\n    .get(`${USER_URL}/getRoleList`)\r\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios\r\n     .get(`${GET_USERS_URL}?${query}`)\r\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n     .get(`${USER_URL}/roles?role_id=${id}`)  \r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst createUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .put(USER_URL, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updateUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .post(`${USER_URL}/${user.id}`, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst deleteUser = (userId: ID): Promise<void> => {\r\n  return axios.delete(`${USER_URL}/${userId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\r\n  const requests = userIds.map((id) => axios.delete(`${USER_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {getUsers, deleteUser, deleteSelectedUsers, getUserById, createUser, updateUser, getRoleList}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n  WithChildren,\r\n} from '../../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC<WithChildren> = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n  WithChildren,\r\n} from '../../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC<WithChildren> = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n  WithChildren,\r\n} from '../../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC<WithChildren> = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import {KTSVG} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      {/* <UsersListFilter /> */}\r\n\r\n      {/* begin::Export */}\r\n      {/* <button type='button' className='btn btn-light-primary me-3'>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\r\n        Export\r\n      </button> */}\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      {/* <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add User\r\n      </button> */}\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search user'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","// @ts-nocheck\r\nimport {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","// @ts-nocheck\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../../_metronic/helpers'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: User\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => (\r\n  <div className='d-flex align-items-center'>\r\n  {/* begin:: Avatar */}\r\n  <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\r\n\r\n  </div>\r\n  <div className='d-flex flex-column'>\r\n    <a href='#' className='text-gray-800 text-hover-primary mb-1'>\r\n      {user.rolename}\r\n    </a>\r\n    \r\n  </div>\r\n</div>\r\n)\r\n\r\nexport {UserInfoCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../../_metronic/helpers'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: User\r\n}\r\n\r\nconst UserInfoCellPermission: FC<Props> = ({user}) => (\r\n  \r\n  <div className='d-flex align-items-center'>\r\n  {/* begin:: Avatar */}\r\n  <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\r\n\r\n  </div>\r\n  <div className='d-flex flex-column'>\r\n    <a href='#' className='text-gray-800 text-hover-primary mb-1'>\r\n\r\n    <div dangerouslySetInnerHTML={{__html: String(user.Permission) }} ></div>\r\n     \r\n    </a>\r\n    \r\n  </div>\r\n</div>\r\n)\r\n\r\nexport {UserInfoCellPermission}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","// @ts-nocheck\r\nimport {Column} from 'react-table'\r\nimport {UserInfoCell} from './UserInfoCell'\r\nimport {UserInfoCellStatus} from './UserInfoCellStatus'\r\nimport {UserInfoCellPermission} from './UserInfoCellPermission'\r\nimport {UserInfoCellAccess} from './UserInfoCellAccess'\r\nimport {UserLastLoginCell} from './UserLastLoginCell'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  // {\r\n  //   Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n  //   id: 'selection',\r\n  //   Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].rolename} />,\r\n  // },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Role Name' className='min-w-125px' />,\r\n    id: 'rolename',\r\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n  // {\r\n  //   Header: (props) => <UserCustomHeader tableProps={props} title='Status' className='min-w-125px' />,\r\n  //   id: 'status',\r\n  //   Cell: ({...props}) => <UserInfoCellStatus user={props.data[props.row.index]} />,\r\n  // },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Permissions' className='min-w-125px' />,\r\n    id: 'Permission',\r\n    Cell: ({...props}) => <UserInfoCellPermission user={props.data[props.row.index]} />,\r\n  },\r\n  // {\r\n  //   Header: (props) => (\r\n  //     <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n  //   ),\r\n  //   id: 'actions',\r\n  //   Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  // },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst mappedLabel = (label: string): string => {\r\n  if (label === '&laquo; Previous') {\r\n    return 'Previous'\r\n  }\r\n\r\n  if (label === 'Next &raquo;') {\r\n    return 'Next'\r\n  }\r\n\r\n  return label\r\n}\r\n\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links\r\n              ?.map((link) => {\r\n                return {...link, label: mappedLabel(link.label)}\r\n              })\r\n              .map((link) => (\r\n                <li\r\n                  key={link.label}\r\n                  className={clsx('page-item', {\r\n                    active: pagination.page === link.page,\r\n                    disabled: isLoading,\r\n                    previous: link.label === 'Previous',\r\n                    next: link.label === 'Next',\r\n                  })}\r\n                >\r\n                  <a\r\n                    className={clsx('page-link', {\r\n                      'page-text': link.label === 'Previous' || link.label === 'Next',\r\n                      'me-5': link.label === 'Previous',\r\n                    })}\r\n                    onClick={() => updatePage(link.page)}\r\n                    style={{cursor: 'pointer'}}\r\n                  >\r\n                    {mappedLabel(link.label)}\r\n                  </a>\r\n                </li>\r\n              ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from '../table/columns/CustomHeaderColumn'\r\nimport {CustomRow} from '../table/columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Edit Role</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../../_metronic/helpers'\r\nexport type User = {\r\n  Permission?: string,\r\n  _id?: any,\r\n  id: ID, \r\n  role_name?: string,\r\n  rolename?: string,\r\n  status?: string,\r\n  label?: string,\r\n  value?: string,\r\n  UserManagement?: string,\r\n  UploadClaims?: string,\r\n  ViewClaims?: string,\r\n  ViewMyClaims?: string,\r\n  AddNewPM?: string,\r\n  AddNewPractice?: string,\r\n  ARCommentHistory?: string,\r\n  AssignClaim?: string,\r\n  ReportCTR?: string,\r\n  ReportTPD?: string,\r\n  BotCSC?: string,\r\n  ReportPCA?: string\r\n  \r\n}\r\n\r\nexport type UsersQueryResponse = Response<Array<User>>\r\n\r\nexport const initialUser: User = {\r\n  Permission: \"\",\r\n  _id: null,\r\n  id: null,\r\n  role_name: '',\r\n  rolename:'',\r\n  status: '',\r\n  label: '',\r\n  value: '',\r\n  UserManagement: \"\",\r\n  UploadClaims: \"\",\r\n  ViewClaims: \"\",\r\n  ViewMyClaims: \"\",\r\n  AddNewPM: \"\",\r\n  AddNewPractice: \"\",\r\n  ARCommentHistory: \"\",\r\n  AssignClaim: \"\",\r\n  ReportCTR: \"\",\r\n  ReportTPD: \"\",\r\n  BotCSC: \"\",\r\n  ReportPCA: \"\"\r\n  \r\n}\r\n","import {FC, useEffect, useState} from 'react'\r\nimport * as Yup from 'yup'\r\nimport {useFormik} from 'formik'\r\nimport {isNotEmpty, toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport swal from 'sweetalert';\r\nimport {initialUser, User} from '../core/_models'\r\nimport clsx from 'clsx'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser, updateUser} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\nimport axios from 'axios'\r\nimport { error } from 'jquery';\r\nconst API_URL = process.env.REACT_APP_API_URL\r\nexport const REGISTER_URL = `/api/roles/createRole`\r\nconst getRoleList = `/api/roles/getRoleList`\r\nconst getPermissionRoleList = `/users/getPermissionRoleList`\r\nconst getRoleByid = `/api/roles/getRoleByid`\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  user: User\r\n}\r\n\r\nconst editUserSchema = Yup.object().shape({\r\n  role_name : Yup.string().required('Role Name is required'),\r\n  PermissionsList : Yup.string().required('Permission List is required')\r\n\r\n})\r\n\r\nconst UserEditModalForm: FC<Props> = ({user, isUserLoading}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const [data, setData] = useState<User>(initialUser)\r\n  const [RoleNameDatas, setRoleNameDatas] = useState([{ role_name: \"\", _id: \"\" }])\r\n  const [datas, setdatas] = useState([{ role_name: \"\", _id: \"\" }])\r\n  const [SelectedRoleName, setSelectedRoleName] = useState({})\r\n  const [RolesList, setRolesList] = useState([])\r\n  \r\n  const {refetch} = useQueryResponse()\r\n\r\n  const [userForEdit] = useState<User>({\r\n    ...user,\r\n    id: user.id || initialUser.id,\r\n    rolename: user.rolename || initialUser.rolename,\r\n    label: user.label || initialUser.label,\r\n    value: user.value || initialUser.value\r\n  })\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  const Getdata = async () => {\r\n    if(user.id){\r\n      setSelectedRoleName({value:user.id,label:user.role_name})\r\n    }\r\n    const Result = await axios.get(getRoleList)\r\n    console.log(\"Result\", Result.data)\r\n    if (Result.data) {\r\n      setdatas(Result.data.data)\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  const gettdata = async () => {\r\n\r\n    const getPermissionRoleListData = await axios.get(getPermissionRoleList)\r\n    if (getPermissionRoleListData.data) {\r\n      setRolesList(getPermissionRoleListData.data.data)\r\n    }\r\n    const Result = await axios.get(getRoleList)\r\n    if (Result.data) {\r\n      setRoleNameDatas(Result.data.data)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    gettdata();\r\n    Getdata();\r\n  }, [])\r\n\r\n  const formik = useFormik({\r\n    initialValues: userForEdit,\r\n    validationSchema: editUserSchema,\r\n    onSubmit: async (values, { setSubmitting }) => {\r\n      console.log(\"values\", values)\r\n      setSubmitting(true)\r\n      try {\r\n        var test: any\r\n        test = await createUser(values)\r\n        console.log(\"test\", test.role_name)\r\n        //}\r\n      } catch (ex) {\r\n        console.error(ex)\r\n      } finally {\r\n\r\n        if (values._id) {\r\n          swal({\r\n            title: 'Success',\r\n            text: `${values.role_name} Updated Successfully...`,\r\n            icon: \"success\",\r\n          })\r\n            .then((res: any) => {\r\n              setSubmitting(true)\r\n              cancel(true)\r\n            })\r\n        } else {\r\n          swal({\r\n            title: 'Success',\r\n            text: `${values.role_name} Created Successfully...`,\r\n            icon: \"success\",\r\n          })\r\n            .then((res: any) => {\r\n              setSubmitting(true)\r\n              cancel(true)\r\n            })\r\n        }\r\n\r\n      }\r\n    },\r\n  })\r\n\r\n  const getRoleName = async(event: any) => {\r\n    formik.setFieldValue(\"role_name\", event.target.value)\r\n    await axios.post(getRoleByid, { id: event.target.value }).then((res) => {\r\n      if(res.data.data.PermissionsList.length > 0){\r\n        res.data.data.PermissionsList.map((getdat:any,index:any)=>{\r\n          $(`input[name=${getdat.label}][value=${getdat.value}]`).prop(\"checked\",true)\r\n          formik.setFieldValue(getdat.label, getdat.value)\r\n        })\r\n      }else {\r\n        $(`input[class='form-check-input']`).removeAttr(\"checked\");\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form id='kt_modal_add_user_form' className='form' onSubmit={formik.handleSubmit} noValidate>\r\n        {/* begin::Scroll */}\r\n        \r\n        <div\r\n          className='d-flex flex-column scroll-y me-n7 pe-7'\r\n          id='kt_modal_add_user_scroll'\r\n          data-kt-scroll='true'\r\n          data-kt-scroll-activate='{default: false, lg: true}'\r\n          data-kt-scroll-max-height='auto'\r\n          data-kt-scroll-dependencies='#kt_modal_add_user_header'\r\n          data-kt-scroll-wrappers='#kt_modal_add_user_scroll'\r\n          data-kt-scroll-offset='300px'\r\n        >\r\n        <div className='form-group row'>\r\n          <div className='col-lg-6 fv-row'>\r\n                <label className='col-md-4 col-form-label fw-bold fs-6'>\r\n                    <span className='required'>Role Name</span>\r\n                </label>\r\n                <select onChange={getRoleName}  id=\"role_name\" name=\"role_name\" className='form-select form-select-solid form-select-lg fw-bold'>\r\n                    <option value=''>Role Name</option>\r\n                    {\r\n                      RoleNameDatas.map((res, index) => {\r\n                        return (<option value={res._id} key={index}>{res.role_name}</option>)\r\n\r\n                      })\r\n                    }\r\n                </select>\r\n          </div>\r\n        </div>\r\n\r\n        <table id='kt_table_users' className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'>\r\n                  <thead>\r\n                    <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n                      <th>Permissions</th>\r\n                      <th>Access</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className='text-gray-600 fw-bold' >\r\n                    {\r\n                      RolesList.map((res: any, _inde: any) => {\r\n                        return (\r\n                          <tr>\r\n                            <td >{res.label}</td>\r\n                            <td >\r\n                              {res.AttributesList.map((ress: any, index: any) => {\r\n\r\n                                return <>\r\n                                  <div className=\"form-check form-check-inline\">\r\n                                    <input className=\"form-check-input\" type=\"radio\" {...formik.getFieldProps(res.value)} id={ress.label} value={ress.value} />\r\n                                    <label className=\"form-check-label\" htmlFor={ress.label}>{ress.label}</label>\r\n                                  </div>\r\n\r\n                                </>\r\n                              })}\r\n\r\n                            </td>\r\n                          </tr>\r\n                        )\r\n                      })\r\n                    }\r\n                  </tbody>\r\n                </table>\r\n\r\n        </div>\r\n        \r\n\r\n        \r\n        <div className='text-center pt-15'>\r\n          <button\r\n            type='reset'\r\n            onClick={() => cancel()}\r\n            className='btn btn-light me-3'\r\n            data-kt-users-modal-action='cancel'\r\n            disabled={formik.isSubmitting || isUserLoading}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type='submit'\r\n            className='btn btn-primary'\r\n            data-kt-users-modal-action='submit'\r\n            disabled={isUserLoading || formik.isSubmitting || !formik.isValid || !formik.touched}\r\n          >\r\n            <span className='indicator-label'>Submit</span>\r\n            {(formik.isSubmitting || isUserLoading) && (\r\n              <span className='indicator-progress'>\r\n                Please wait...{' '}\r\n                <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n              </span>\r\n            )}\r\n          </button>\r\n        </div>\r\n        {/* end::Actions */}\r\n      </form>\r\n      {(formik.isSubmitting || isUserLoading) && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {\r\n    isLoading,\r\n    data: user,\r\n    error,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} user={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} user={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered modal-xl'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15 my-7'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {KTCard} from '../../../../../_metronic/helpers'\r\n\r\nconst RolesListPage = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst RolesList = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <RolesListPage />\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport { RolesList }\r\n","// import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\r\n// import {PageLink, PageTitle} from '../../../../_metronic/layout/core'\r\n// //import {UsersListWrapper} from './role-list/RoleList'\r\n\r\n// const usersBreadcrumbs: Array<PageLink> = [\r\n//   {\r\n//     title: 'Role Management',\r\n//     path: '/apps/role-management/role',\r\n//     isSeparator: false,\r\n//     isActive: false,\r\n//   },\r\n//   {\r\n//     title: '',\r\n//     path: '',\r\n//     isSeparator: true,\r\n//     isActive: false,\r\n//   },\r\n// ]\r\n\r\n// const RolePage = () => {\r\n//   return (\r\n//     <Routes>\r\n//       <Route element={<Outlet />}>\r\n//         <Route\r\n//           path='role'\r\n//           element={\r\n//             <>\r\n//               <PageTitle breadcrumbs={usersBreadcrumbs}>Role list</PageTitle>\r\n//               {/* <UsersListWrapper /> */}\r\n//             </>\r\n//           }\r\n//         />\r\n//       </Route>\r\n//       <Route index element={<Navigate to='/apps/role-management/role' />} />\r\n//     </Routes>\r\n//   )\r\n// }\r\n\r\n// export default RolePage\r\n// import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\r\n// import {PageLink, PageTitle} from '../../../../_metronic/layout/core'\r\n// //import {UsersListWrapper} from './role-list/RoleList'\r\n\r\n// const usersBreadcrumbs: Array<PageLink> = [\r\n//   {\r\n//     title: 'Role Management',\r\n//     path: '/apps/role-management/role',\r\n//     isSeparator: false,\r\n//     isActive: false,\r\n//   },\r\n//   {\r\n//     title: '',\r\n//     path: '',\r\n//     isSeparator: true,\r\n//     isActive: false,\r\n//   },\r\n// ]\r\n\r\n// const RolePage = () => {\r\n//   return (\r\n//     <Routes>\r\n//       <Route element={<Outlet />}>\r\n//         <Route\r\n//           path='role'\r\n//           element={\r\n//             <>\r\n//               <PageTitle breadcrumbs={usersBreadcrumbs}>Role list</PageTitle>\r\n//               {/* <UsersListWrapper /> */}\r\n//             </>\r\n//           }\r\n//         />\r\n//       </Route>\r\n//       <Route index element={<Navigate to='/apps/role-management/role' />} />\r\n//     </Routes>\r\n//   )\r\n// }\r\n\r\n// export default RolePage\r\nimport {Route, Routes, Outlet, Navigate} from 'react-router-dom'\r\nimport {PageLink, PageTitle} from '../../../../_metronic/layout/core'\r\nimport {RolesList} from './users-list/RolesList'\r\n\r\nconst usersBreadcrumbs: Array<PageLink> = [\r\n  {\r\n    title: 'Role Management',\r\n    path: '/apps/role-management/role',\r\n    isSeparator: false,\r\n    isActive: false,\r\n  },\r\n  {\r\n    title: '',\r\n    path: '',\r\n    isSeparator: true,\r\n    isActive: false,\r\n  },\r\n]\r\n\r\nconst RolePage = () => {\r\n  return (\r\n    <Routes>\r\n      <Route element={<Outlet />}>\r\n        <Route\r\n          path='role'\r\n          element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Role list</PageTitle>\r\n              <RolesList />\r\n            </>\r\n          }\r\n        />\r\n      </Route>\r\n      <Route index element={<Navigate to='/apps/role-management/role' />} />\r\n    </Routes>\r\n  )\r\n}\r\n\r\nexport default RolePage\r\n"],"names":["USER_URL","createUser","user","axios","then","response","data","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","_ref","children","_useState","useState","_useState2","_slicedToArray","state","setState","_jsx","Provider","value","updateState","updates","updatedState","_objectSpread","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","stringifyRequestQuery","query","setQuery","updatedQuery","useMemo","useEffect","_useQuery","useQuery","concat","QUERIES","d","getUsers","cacheTime","keepPreviousData","refetchOnWindowFocus","isFetching","refetch","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","_useState3","_useState4","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","id","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","UsersListToolbar","className","UsersListGrouping","_useListView","queryClient","useQueryClient","deleteSelectedItems","useMutation","userIds","requests","map","deleteSelectedUsers","onSuccess","invalidateQueries","_jsxs","length","type","onClick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","mutateAsync","abrupt","sent","stop","UsersListSearchComponent","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","undefined","search","initialQueryState","KTSVG","path","placeholder","onChange","e","target","UsersListHeader","CustomHeaderColumn","column","_Fragment","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserInfoCell","href","rolename","UserInfoCellPermission","dangerouslySetInnerHTML","__html","String","Permission","UserCustomHeader","title","tableProps","_useQueryRequest","isSelectedForSorting","sort","order","style","cursor","usersColumns","props","Cell","Object","assign","_objectDestructuringEmpty","index","_ref2","UsersListLoading","borderRadius","boxShadow","backgroundColor","color","fontWeight","margin","width","padding","top","left","position","textAlign","mappedLabel","label","UsersListPagination","_pagination$links","pagination","defaultPaginationState","links","payload","useQueryResponsePagination","link","active","page","previous","items_per_page","UsersTable","users","columns","_useTable","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","KTCardBody","i","colSpan","UserEditModalHeader","initialUser","_id","role_name","status","UserManagement","UploadClaims","ViewClaims","ViewMyClaims","AddNewPM","AddNewPractice","ARCommentHistory","AssignClaim","ReportCTR","ReportTPD","BotCSC","ReportPCA","getRoleList","editUserSchema","Yup","shape","required","PermissionsList","UserEditModalForm","isUserLoading","RoleNameDatas","setRoleNameDatas","_useState5","_useState6","setdatas","_useState7","_useState8","setSelectedRoleName","_useState9","_useState10","RolesList","setRolesList","_useState11","userForEdit","cancel","withRefresh","Getdata","Result","console","log","apply","arguments","gettdata","_ref3","_callee2","getPermissionRoleListData","_context2","formik","useFormik","initialValues","validationSchema","onSubmit","_onSubmit","_callee3","values","_ref4","setSubmitting","test","_context3","t0","error","swal","text","icon","res","finish","_x","_x2","getRoleName","_ref5","_callee4","event","_context4","setFieldValue","getdat","$","prop","removeAttr","_x3","handleSubmit","noValidate","name","_inde","AttributesList","ress","getFieldProps","htmlFor","isSubmitting","isValid","touched","UserEditModalFormWrapper","enabledQuery","isNotEmpty","enabled","onError","err","UserEditModal","document","body","classList","add","remove","role","tabIndex","RolesListPage","KTCard","usersBreadcrumbs","isSeparator","isActive","Routes","Route","element","Outlet","PageTitle","breadcrumbs","Navigate","to"],"sourceRoot":""}